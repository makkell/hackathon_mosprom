import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from import_ru import download_by_tnved, mark_friendly
from calc_import_metrics import calc_import_metrics
from draw_image import summarize_trends, pie_friendly_unfriendly_with_china
from calc_man_metrics import calculate_man_metrics, get_summary_metrics
from llm.llm_answer import get_llm_answer

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
def create_pie_chart(df_year, year):
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ–¥–∞"""
    CHINA = 'China'
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    d = df_year.copy()
    d['primaryValue'] = pd.to_numeric(d['primaryValue'], errors="coerce").fillna(0)
    
    # –ú–∞—Å–∫–∏
    mask_china = d['reporterDesc'].str.contains(CHINA, na=False)
    mask_friend = d['isFriendly'] == 1
    
    # –°—É–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    val_china = float(d.loc[mask_china, 'primaryValue'].sum())
    val_friend_other = float(d.loc[mask_friend & ~mask_china, 'primaryValue'].sum())
    val_unfriendly = float(d.loc[~mask_friend, 'primaryValue'].sum())
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    labels = ["–ö–∏—Ç–∞–π", "–î—Ä—É–≥–∏–µ –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ", "–ù–µ–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ"]
    values = [val_china, val_friend_other, val_unfriendly]
    colors = ['#FF6B6B', '#4ECDC4', '#45B7D1']
    
    fig = go.Figure(data=[go.Pie(
        labels=labels,
        values=values,
        hole=0.3,
        marker_colors=colors,
        textinfo='label+percent+value',
        textfont_size=14,
        marker_line=dict(color='white', width=2)
    )])
    
    fig.update_layout(
        title=dict(
            text=f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏, {year}",
            font=dict(size=16, color='#2c3e50'),
            x=0.5,
            xanchor='center'
        ),
        font=dict(size=12),
        showlegend=True,
        height=450,
        legend=dict(
            orientation="v",
            yanchor="middle",
            y=0.5,
            xanchor="left",
            x=1.02
        )
    )
    
    return fig

def create_total_pie_chart(df1, df2, df3):
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—â—É—é –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –∑–∞ –≤—Å–µ –≥–æ–¥—ã"""
    CHINA = 'China'
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    df_total = pd.concat([df1, df2, df3], ignore_index=True)
    df_total['primaryValue'] = pd.to_numeric(df_total['primaryValue'], errors="coerce").fillna(0)
    
    # –ú–∞—Å–∫–∏
    mask_china = df_total['reporterDesc'].str.contains(CHINA, na=False)
    mask_friend = df_total['isFriendly'] == 1
    
    # –°—É–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    val_china = float(df_total.loc[mask_china, 'primaryValue'].sum())
    val_friend_other = float(df_total.loc[mask_friend & ~mask_china, 'primaryValue'].sum())
    val_unfriendly = float(df_total.loc[~mask_friend, 'primaryValue'].sum())
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    labels = ["–ö–∏—Ç–∞–π", "–î—Ä—É–≥–∏–µ –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ", "–ù–µ–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ"]
    values = [val_china, val_friend_other, val_unfriendly]
    colors = ['#FF6B6B', '#4ECDC4', '#45B7D1']
    
    fig = go.Figure(data=[go.Pie(
        labels=labels,
        values=values,
        hole=0.3,
        marker_colors=colors,
        textinfo='label+percent+value',
        textfont_size=16,
        marker_line=dict(color='white', width=3)
    )])
    
    fig.update_layout(
        title=dict(
            text="–û–±—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞ 3 –≥–æ–¥–∞",
            font=dict(size=18, color='#2c3e50'),
            x=0.5,
            xanchor='center'
        ),
        font=dict(size=14),
        showlegend=True,
        height=550,
        legend=dict(
            orientation="v",
            yanchor="middle",
            y=0.5,
            xanchor="left",
            x=1.02
        )
    )
    
    return fig

def create_trend_chart(years, values, title, emoji):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞"""
    fig = go.Figure()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    if "–∏–º–ø–æ—Ä—Ç" in title.lower():
        color = '#1f77b4'
        gradient_color = 'rgba(31, 119, 180, 0.2)'
    elif "–Ω–µ–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö" in title.lower():
        color = '#FF6B6B'
        gradient_color = 'rgba(255, 107, 107, 0.2)'
    elif "–∫–∏—Ç–∞—è" in title.lower():
        color = '#4ECDC4'
        gradient_color = 'rgba(78, 205, 196, 0.2)'
    else:
        color = '#45B7D1'
        gradient_color = 'rgba(69, 183, 209, 0.2)'
    
    fig.add_trace(go.Scatter(
        x=years,
        y=values,
        mode='lines+markers',
        name=title,
        line=dict(color=color, width=4, shape='spline'),
        marker=dict(
            size=12, 
            color=color,
            line=dict(color='white', width=2)
        ),
        fill='tonexty',
        fillcolor=gradient_color,
        hovertemplate=f'<b>{emoji} {title}</b><br>–ì–æ–¥: %{{x}}<br>–ó–Ω–∞—á–µ–Ω–∏–µ: %{{y}}<extra></extra>'
    ))
    
    fig.update_layout(
        title=dict(
            text=f"{emoji} {title}",
            font=dict(size=16, color='#2c3e50'),
            x=0.5,
            xanchor='center'
        ),
        xaxis=dict(
            title=dict(text="–ì–æ–¥", font=dict(size=14, color='#2c3e50')),
            tickfont=dict(size=12),
            gridcolor='rgba(128,128,128,0.2)'
        ),
        yaxis=dict(
            title=dict(text=title, font=dict(size=14, color='#2c3e50')),
            tickfont=dict(size=12),
            gridcolor='rgba(128,128,128,0.2)'
        ),
        font=dict(size=12),
        height=450,
        hovermode='x unified',
        showlegend=False
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    for i, (year, value) in enumerate(zip(years, values)):
        fig.add_annotation(
            x=year,
            y=value,
            text=f"<b>{value:.1f}</b>",
            showarrow=True,
            arrowhead=2,
            arrowsize=1.5,
            arrowwidth=2,
            arrowcolor=color,
            ax=0,
            ay=-40,
            font=dict(size=12, color=color),
            bgcolor='white',
            bordercolor=color,
            borderwidth=1
        )
    
    return fig

def create_production_chart(years, production_data, consumption_data, title, category):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è"""
    fig = go.Figure()
    
    # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
    fig.add_trace(go.Scatter(
        x=years,
        y=production_data,
        mode='lines+markers',
        name='–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
        line=dict(color='#2E8B57', width=4, shape='spline'),
        marker=dict(size=12, color='#2E8B57', line=dict(color='white', width=2)),
        fill='tonexty',
        fillcolor='rgba(46, 139, 87, 0.2)',
        hovertemplate=f'<b>üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ</b><br>–ì–æ–¥: %{{x}}<br>–ó–Ω–∞—á–µ–Ω–∏–µ: %{{y}}<extra></extra>'
    ))
    
    # –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
    fig.add_trace(go.Scatter(
        x=years,
        y=consumption_data,
        mode='lines+markers',
        name='–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ',
        line=dict(color='#FF6B6B', width=4, shape='spline'),
        marker=dict(size=12, color='#FF6B6B', line=dict(color='white', width=2)),
        fill='tonexty',
        fillcolor='rgba(255, 107, 107, 0.2)',
        hovertemplate=f'<b>üõí –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ</b><br>–ì–æ–¥: %{{x}}<br>–ó–Ω–∞—á–µ–Ω–∏–µ: %{{y}}<extra></extra>'
    ))
    
    fig.update_layout(
        title=dict(
            text=f"üè≠ {title} - {category}",
            font=dict(size=16, color='#2c3e50'),
            x=0.5,
            xanchor='center'
        ),
        xaxis=dict(
            title=dict(text="–ì–æ–¥", font=dict(size=14, color='#2c3e50')),
            tickfont=dict(size=12),
            gridcolor='rgba(128,128,128,0.2)'
        ),
        yaxis=dict(
            title=dict(text="–û–±—ä–µ–º", font=dict(size=14, color='#2c3e50')),
            tickfont=dict(size=12),
            gridcolor='rgba(128,128,128,0.2)'
        ),
        font=dict(size=12),
        height=450,
        hovermode='x unified',
        showlegend=True,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        )
    )
    
    return fig

def create_self_sufficiency_chart(years, self_sufficiency_data, title, category):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å–∞–º–æ–æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç–∏"""
    fig = go.Figure()
    
    # –õ–∏–Ω–∏—è —Å–∞–º–æ–æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
    fig.add_trace(go.Scatter(
        x=years,
        y=self_sufficiency_data,
        mode='lines+markers',
        name='–°–∞–º–æ–æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç—å',
        line=dict(color='#4ECDC4', width=4, shape='spline'),
        marker=dict(size=12, color='#4ECDC4', line=dict(color='white', width=2)),
        fill='tonexty',
        fillcolor='rgba(78, 205, 196, 0.2)',
        hovertemplate=f'<b>üìä –°–∞–º–æ–æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç—å</b><br>–ì–æ–¥: %{{x}}<br>–ó–Ω–∞—á–µ–Ω–∏–µ: %{{y:.2f}}<extra></extra>'
    ))
    
    # –õ–∏–Ω–∏—è 100% —Å–∞–º–æ–æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
    fig.add_hline(y=1.0, line_dash="dash", line_color="red", 
                  annotation_text="100% —Å–∞–º–æ–æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç—å", 
                  annotation_position="bottom right")
    
    fig.update_layout(
        title=dict(
            text=f"üìä {title} - {category}",
            font=dict(size=16, color='#2c3e50'),
            x=0.5,
            xanchor='center'
        ),
        xaxis=dict(
            title=dict(text="–ì–æ–¥", font=dict(size=14, color='#2c3e50')),
            tickfont=dict(size=12),
            gridcolor='rgba(128,128,128,0.2)'
        ),
        yaxis=dict(
            title=dict(text="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∞–º–æ–æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç–∏", font=dict(size=14, color='#2c3e50')),
            tickfont=dict(size=12),
            gridcolor='rgba(128,128,128,0.2)',
            range=[0, max(1.2, max(self_sufficiency_data) * 1.1)]
        ),
        font=dict(size=12),
        height=450,
        hovermode='x unified',
        showlegend=True
    )
    
    return fig

def create_import_dependency_chart(years, import_dependency_data, title, category):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–º–ø–æ—Ä—Ç–∞"""
    fig = go.Figure()
    
    # –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–º–ø–æ—Ä—Ç–∞
    fig.add_trace(go.Scatter(
        x=years,
        y=import_dependency_data,
        mode='lines+markers',
        name='–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∏–º–ø–æ—Ä—Ç–∞',
        line=dict(color='#FF8C00', width=4, shape='spline'),
        marker=dict(size=12, color='#FF8C00', line=dict(color='white', width=2)),
        fill='tonexty',
        fillcolor='rgba(255, 140, 0, 0.2)',
        hovertemplate=f'<b>üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∏–º–ø–æ—Ä—Ç–∞</b><br>–ì–æ–¥: %{{x}}<br>–ó–Ω–∞—á–µ–Ω–∏–µ: %{{y:.2f}}<extra></extra>'
    ))
    
    # –õ–∏–Ω–∏—è 30% –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥)
    fig.add_hline(y=0.3, line_dash="dash", line_color="red", 
                  annotation_text="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥ 30%", 
                  annotation_position="bottom right")
    
    fig.update_layout(
        title=dict(
            text=f"üì¶ {title} - {category}",
            font=dict(size=16, color='#2c3e50'),
            x=0.5,
            xanchor='center'
        ),
        xaxis=dict(
            title=dict(text="–ì–æ–¥", font=dict(size=14, color='#2c3e50')),
            tickfont=dict(size=12),
            gridcolor='rgba(128,128,128,0.2)'
        ),
        yaxis=dict(
            title=dict(text="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", font=dict(size=14, color='#2c3e50')),
            tickfont=dict(size=12),
            gridcolor='rgba(128,128,128,0.2)',
            range=[0, max(0.5, max(import_dependency_data) * 1.1)]
        ),
        font=dict(size=12),
        height=450,
        hovermode='x unified',
        showlegend=True
    )
    
    return fig

def create_metrics_radar_chart(metrics_data, category):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–¥–∞—Ä–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –º–µ—Ç—Ä–∏–∫"""
    fig = go.Figure()
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–¥–∞—Ä–∞
    metrics = ['self_sufficiency', 'production_share', 'competitiveness_index', 'self_sufficiency_index']
    values = []
    labels = ['–°–∞–º–æ–æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç—å', '–î–æ–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å', '–ò–Ω–¥–µ–∫—Å —Å–∞–º–æ–æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç–∏']
    
    for metric in metrics:
        if metric in metrics_data and metrics_data[metric] is not None:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–¥–∞—Ä–∞ (0-1)
            if metric == 'competitiveness_index':
                # –î–ª—è –∏–Ω–¥–µ–∫—Å–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫—É—é —à–∫–∞–ª—É
                value = min(1.0, np.log10(metrics_data[metric] + 1) / 3)
            else:
                value = min(1.0, metrics_data[metric])
            values.append(value)
        else:
            values.append(0)
    
    fig.add_trace(go.Scatterpolar(
        r=values,
        theta=labels,
        fill='toself',
        name=category,
        line_color='#1f77b4',
        fillcolor='rgba(31, 119, 180, 0.3)'
    ))
    
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 1]
            )),
        showlegend=True,
        title=dict(
            text=f"üìä –†–∞–¥–∞—Ä –º–µ—Ç—Ä–∏–∫ - {category}",
            font=dict(size=16, color='#2c3e50'),
            x=0.5,
            xanchor='center'
        ),
        height=500
    )
    
    return fig

def format_metrics_for_llm():
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ LLM –ø—Ä–æ–º–ø—Ç"""
    if 'trends' not in st.session_state:
        return "–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
    
    latest_record = st.session_state.records[-1]
    trends = st.session_state.trends
    latest_year = st.session_state.years[-1]
    tnved_code = st.session_state.tnved_code
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    metrics_text = f"""
–î–∞–Ω–Ω—ã–µ:
–ö–æ–¥ –¢–ù –í–≠–î: {tnved_code}
–ü–µ—Ä–∏–æ–¥: {latest_year} –≥–æ–¥

–û–±—ä—ë–º –∏–º–ø–æ—Ä—Ç–∞ (import_total): {latest_record['import_total']:,.0f}
–¢—Ä–µ–Ω–¥ –∏–º–ø–æ—Ä—Ç–∞ (import_total_trend): {trends['trends']['import_total']['label']}

–î–æ–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –Ω–µ–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω (share_unfriendly): {latest_record['share_unfriendly']:.3f}
–¢—Ä–µ–Ω–¥ –¥–æ–ª–∏ –ù–° (share_unfriendly_trend): {trends['trends']['share_unfriendly']['label']}

–î–æ–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –ö–∏—Ç–∞—è (share_china): {latest_record['share_china']:.3f}
–¢—Ä–µ–Ω–¥ –¥–æ–ª–∏ –ö–∏—Ç–∞—è (share_china_trend): {trends['trends']['share_china']['label']}
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    if not np.isnan(latest_record['price_china']):
        metrics_text += f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∏–∑ –ö–∏—Ç–∞—è (price_china): {latest_record['price_china']:.2f}\n"
    else:
        metrics_text += "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∏–∑ –ö–∏—Ç–∞—è (price_china): N/A\n"
    
    if not np.isnan(latest_record['price_others']):
        metrics_text += f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∏–∑ –ø—Ä–æ—á–∏—Ö —Å—Ç—Ä–∞–Ω (price_others): {latest_record['price_others']:.2f}\n"
    else:
        metrics_text += "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∏–∑ –ø—Ä–æ—á–∏—Ö —Å—Ç—Ä–∞–Ω (price_others): N/A\n"
    
    if not np.isnan(latest_record['price_diff_ratio']):
        metrics_text += f"–û—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω (price_diff_ratio): {latest_record['price_diff_ratio']:.3f}\n"
        metrics_text += f"–§–ª–∞–≥ –¥–µ–º–ø–∏–Ω–≥–∞ (dumping_flag): {latest_record['price_diff_ratio'] < 1.0}\n"
    else:
        metrics_text += "–û—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω (price_diff_ratio): N/A\n"
        metrics_text += "–§–ª–∞–≥ –¥–µ–º–ø–∏–Ω–≥–∞ (dumping_flag): N/A\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –º–µ—Ä –¢–¢–†
    metrics_text += "\n–§–ª–∞–≥–∏ –¥–ª—è –º–µ—Ä –¢–¢–†:\n"
    for flag_key, flag_value in trends['flags'].items():
        metrics_text += f"{flag_key}: {flag_value}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    if 'production_metrics' in st.session_state:
        metrics_text += "\n=== –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–°–¢–í–ê –ò –ü–û–¢–†–ï–ë–õ–ï–ù–ò–Ø ===\n"
        
        for category, category_metrics in st.session_state.production_metrics.items():
            latest_year_prod = max(category_metrics.keys())
            latest_metrics = category_metrics[latest_year_prod]
            
            metrics_text += f"\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            metrics_text += f"–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤ –†–æ—Å—Å–∏–∏ (production_total): {latest_metrics['manufacture']:,.0f}\n"
            metrics_text += f"–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤ –†–æ—Å—Å–∏–∏ (consumption_total): {latest_metrics['consumption']:,.0f}\n"
            metrics_text += f"–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {latest_metrics['self_sufficiency'] >= 1.0}\n"
            
            if latest_metrics['growth_rate'] is not None:
                metrics_text += f"–¢—Ä–µ–Ω–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (production_trend): {'–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π' if latest_metrics['growth_rate'] > 0.02 else '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π' if latest_metrics['growth_rate'] < -0.02 else '–°—Ç–∞–±–∏–ª—å–Ω—ã–π'}\n"
            else:
                metrics_text += "–¢—Ä–µ–Ω–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (production_trend): N/A\n"
            
            if latest_metrics['consumption_growth_rate'] is not None:
                metrics_text += f"–¢—Ä–µ–Ω–¥ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è (consumption_trend): {'–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π' if latest_metrics['consumption_growth_rate'] > 0.02 else '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π' if latest_metrics['consumption_growth_rate'] < -0.02 else '–°—Ç–∞–±–∏–ª—å–Ω—ã–π'}\n"
            else:
                metrics_text += "–¢—Ä–µ–Ω–¥ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è (consumption_trend): N/A\n"
            
            metrics_text += f"–°–∞–º–æ–æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç—å: {latest_metrics['self_sufficiency']:.3f}\n"
            metrics_text += f"–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∏–º–ø–æ—Ä—Ç–∞: {latest_metrics['import_dependency']:.3f}\n"
            metrics_text += f"–î–æ–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {latest_metrics['production_share']:.3f}\n"
            
            if latest_metrics['competitiveness_index'] is not None:
                metrics_text += f"–ò–Ω–¥–µ–∫—Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {latest_metrics['competitiveness_index']:.3f}\n"
            else:
                metrics_text += "–ò–Ω–¥–µ–∫—Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: N/A\n"
    
    return metrics_text

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–∞ –†–§",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
st.markdown("""
<style>
    .stTabs [data-baseweb="tab"] {
        background-color: #f0f2f6;
        color: #262730;
        font-weight: 600;
    }
    .stTabs [aria-selected="true"] {
        background-color: #1f77b4;
        color: white;
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üìä  –ï–¥–∏–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
with st.sidebar:
    st.markdown("### üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
    
    # –í–≤–æ–¥ –∫–æ–¥–∞ –¢–ù –í–≠–î
    st.markdown("**–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¢–ù –í–≠–î:**")
    tnved_code = st.text_input(
        "–ö–æ–¥ –¢–ù –í–≠–î", 
        value="842810", 
        help="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–æ–≤–∞—Ä–Ω–æ–π –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –≤–Ω–µ—à–Ω–µ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8528)"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    analyze_button = st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary", use_container_width=True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–¥–µ
    st.markdown("---")
    st.markdown("### ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    st.info("""
    **–ö–æ–¥ 8528** - –ú–æ–Ω–∏—Ç–æ—Ä—ã –∏ –ø—Ä–æ–µ–∫—Ç–æ—Ä—ã, –Ω–µ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –≤ –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    
    **–î—Ä—É–≥–∏–µ –ø—Ä–∏–º–µ—Ä—ã:**
    - 8517 - –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –∞–ø–ø–∞—Ä–∞—Ç—ã
    - 8471 - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—à–∏–Ω—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    - 8703 - –õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
    """)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ API –∫–ª—é—á–∞
    st.markdown("---")
    st.markdown("### ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ò–ò")
    with st.expander("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞ GigaChat"):
        st.markdown("""
        **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç –ò–ò:**
        
        1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://developers.sber.ru/portal/products/gigachat
        2. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª `.env` –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        3. –î–æ–±–∞–≤—å—Ç–µ: `GIGACHAT_API_KEY=–≤–∞—à_–∫–ª—é—á`
        4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        
        **–ü—Ä–∏–º–µ—Ä `.env`:**
        ```
        GIGACHAT_API_KEY=your_api_key_here
        ```
        """)

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
if analyze_button:
    if not tnved_code or not tnved_code.isdigit():
        st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –¢–ù –í–≠–î (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
    else:
        with st.spinner("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑..."):
            try:
                # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                df = download_by_tnved(tnved_code)
                df = mark_friendly(df)
                
                if df.empty:
                    st.error("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–æ–¥—É –¢–ù –í–≠–î –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                else:
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    col = ['refYear', 'reporterDesc', 'isFriendly', 'primaryValue', 'qty', 'qtyUnitCode', 'netWgt','partnerDesc']
                    df_proc = df[col].copy()
                    
                    now = datetime.now()
                    years = [now.year - 3, now.year - 2, now.year - 1]  # [2021, 2022, 2023] - –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
                    
                    df_proc_year_1 = df_proc[df_proc['refYear'] == years[0]].sort_values(by='primaryValue', ascending=False).copy()  # 2021
                    df_proc_year_2 = df_proc[df_proc['refYear'] == years[1]].sort_values(by='primaryValue', ascending=False).copy()  # 2022
                    df_proc_year_3 = df_proc[df_proc['refYear'] == years[2]].sort_values(by='primaryValue', ascending=False).copy()  # 2023
                    
                    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
                    records = []
                    records.append(calc_import_metrics(df_proc_year_1))  # 2021
                    records.append(calc_import_metrics(df_proc_year_2))  # 2022
                    records.append(calc_import_metrics(df_proc_year_3))  # 2023
                    
                    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
                    res = summarize_trends(records, plot=False)
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ session state
                    st.session_state.df_proc_year_1 = df_proc_year_1
                    st.session_state.df_proc_year_2 = df_proc_year_2
                    st.session_state.df_proc_year_3 = df_proc_year_3
                    st.session_state.records = records
                    st.session_state.trends = res
                    st.session_state.tnved_code = tnved_code
                    st.session_state.years = years  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    
                    st.success(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –∫–æ–¥–∞ –¢–ù –í–≠–î: {tnved_code}")
                    st.info(f"üìÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ –≥–æ–¥—ã: {years[0]}, {years[1]}, {years[2]}")
                    
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
if 'trends' in st.session_state:
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    tab1, tab2, tab3, tab4 = st.tabs(["üìà –û–±–∑–æ—Ä", "üìä –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–∞ –†–§", "üè≠ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞", "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"])
    
    with tab1:
        st.header("üìã –ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä")
        st.divider()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            total_import = st.session_state.records[-1]['import_total']
            st.metric(
                label="üí∞ –û–±—â–∏–π –∏–º–ø–æ—Ä—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥)",
                value=f"{total_import:,.0f} $".replace(",", " "),
                delta=f"{st.session_state.trends['trends']['import_total']['delta_pct']*100:+.1f}%" if not np.isnan(st.session_state.trends['trends']['import_total']['delta_pct']) else "N/A"
            )
        
        with col2:
            share_unfriendly = st.session_state.records[-1]['share_unfriendly']
            st.metric(
                label="üö´ –î–æ–ª—è –Ω–µ–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω",
                value=f"{share_unfriendly*100:.1f}%",
                delta=f"{st.session_state.trends['trends']['share_unfriendly']['delta_pct']*100:+.1f}%" if not np.isnan(st.session_state.trends['trends']['share_unfriendly']['delta_pct']) else "N/A"
            )
        
        with col3:
            share_china = st.session_state.records[-1]['share_china']
            st.metric(
                label="üá®üá≥ –î–æ–ª—è –ö–∏—Ç–∞—è",
                value=f"{share_china*100:.1f}%",
                delta=f"{st.session_state.trends['trends']['share_china']['delta_pct']*100:+.1f}%" if not np.isnan(st.session_state.trends['trends']['share_china']['delta_pct']) else "N/A"
            )
        
        with col4:
            price_ratio = st.session_state.records[-1]['price_diff_ratio']
            if not np.isnan(price_ratio):
                st.metric(
                    label="üí± –û—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω (–ö–∏—Ç–∞–π/–¥—Ä—É–≥–∏–µ)",
                    value=f"{price_ratio:.2f}",
                    delta="–î–µ–º–ø–∏–Ω–≥" if price_ratio < 1.0 else "–ù–æ—Ä–º–∞"
                )
            else:
                st.metric(
                    label="üí± –û—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω",
                    value="N/A",
                    delta="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–¥–∞—Ö
        st.header("üìà –¢—Ä–µ–Ω–¥—ã –∑–∞ 3 –≥–æ–¥–∞")
        st.divider()
        
        trends_data = []
        for key, trend in st.session_state.trends['trends'].items():
            trends_data.append({
                '–ú–µ—Ç—Ä–∏–∫–∞': trend['title'],
                '–¢—Ä–µ–Ω–¥': trend['label'],
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)': f"{trend['delta_pct']*100:+.1f}%" if not np.isnan(trend['delta_pct']) else "N/A",
                'CAGR (%)': f"{trend['cagr']*100:+.1f}%" if not np.isnan(trend['cagr']) else "N/A"
            })
        
        trends_df = pd.DataFrame(trends_data)
        st.dataframe(trends_df, use_container_width=True)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        st.info("üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞**: –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ –æ–∑–Ω–∞—á–∞–µ—Ç —Ä–æ—Å—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π - —Å–Ω–∏–∂–µ–Ω–∏–µ, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π - –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
    
    with tab2:
        st.header("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–∞ –†–§")
        st.info("üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**: –ì—Ä–∞—Ñ–∏–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–º–ø–æ—Ä—Ç–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º –∏ –¥–∏–Ω–∞–º–∏–∫—É –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –≥–æ–¥–∞.")
        st.divider()
        
        # –ì—Ä–∞—Ñ–∏–∫–∏ –ø–∏—Ä–æ–≥–∞ –ø–æ –≥–æ–¥–∞–º
        st.header("ü•ß –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ –≥–æ–¥–∞–º")
        st.caption("–ö—Ä—É–≥–æ–≤—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –¥–æ–ª—é –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç—Ä–∞–Ω –≤ –æ–±—â–µ–º –æ–±—ä–µ–º–µ –∏–º–ø–æ—Ä—Ç–∞")
        st.divider()
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≥–æ–¥–∞ (2021)
            if not st.session_state.df_proc_year_1.empty:
                fig1 = create_pie_chart(st.session_state.df_proc_year_1, st.session_state.years[0])
                st.plotly_chart(fig1, use_container_width=True)
        
        with col2:
            # –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≥–æ–¥–∞ (2022)
            if not st.session_state.df_proc_year_2.empty:
                fig2 = create_pie_chart(st.session_state.df_proc_year_2, st.session_state.years[1])
                st.plotly_chart(fig2, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ –≥–æ–¥–∞ (2023)
        if not st.session_state.df_proc_year_3.empty:
            fig3 = create_pie_chart(st.session_state.df_proc_year_3, st.session_state.years[2])
            st.plotly_chart(fig3, use_container_width=True)
        
        # –û–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –≤—Å–µ –≥–æ–¥—ã
        st.header("üìä –û–±—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞ 3 –≥–æ–¥–∞")
        st.caption("–°–≤–æ–¥–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–º–ø–æ—Ä—Ç–∞ –∑–∞ –≤–µ—Å—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥")
        st.divider()
        fig_total = create_total_pie_chart(st.session_state.df_proc_year_1, st.session_state.df_proc_year_2, st.session_state.df_proc_year_3)
        st.plotly_chart(fig_total, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤
        st.header("üìà –¢—Ä–µ–Ω–¥—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º")
        st.caption("–õ–∏–Ω–µ–π–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –¥–∏–Ω–∞–º–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏")
        st.divider()
        
        # –ì—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        fig_import = create_trend_chart(
            st.session_state.trends['years'],
            [r['import_total'] for r in st.session_state.records],
            "–û–±—â–∏–π –∏–º–ø–æ—Ä—Ç, $",
            "üí∞"
        )
        st.plotly_chart(fig_import, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ –¥–æ–ª–∏ –Ω–µ–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
        fig_unfriendly = create_trend_chart(
            st.session_state.trends['years'],
            [r['share_unfriendly']*100 for r in st.session_state.records],
            "–î–æ–ª—è –Ω–µ–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω, %",
            "üö´"
        )
        st.plotly_chart(fig_unfriendly, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ –¥–æ–ª–∏ –ö–∏—Ç–∞—è
        fig_china = create_trend_chart(
            st.session_state.trends['years'],
            [r['share_china']*100 for r in st.session_state.records],
            "–î–æ–ª—è –ö–∏—Ç–∞—è, %",
            "üá®üá≥"
        )
        st.plotly_chart(fig_china, use_container_width=True)
    
    with tab3:
        st.header("üè≠ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –†–§")
        st.info("üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**: –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: category, year, manufacture, consumption, code. –î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∞ –±—É–¥—É—Ç –≤–∑—è—Ç—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –∏–º–ø–æ—Ä—Ç–∞ (–≤–∫–ª–∞–¥–∫–∞ '–ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–∞ –†–§').")
        st.divider()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ CSV —Ñ–∞–π–ª–∞
        uploaded_file = st.file_uploader(
            "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è",
            type=['csv'],
            help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: category, year, manufacture, consumption, code"
        )
        
        if uploaded_file is not None:
            try:
                # –ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
                df_production = pd.read_csv(uploaded_file)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                required_columns = ['category', 'year', 'manufacture', 'consumption', 'code']
                missing_columns = [col for col in required_columns if col not in df_production.columns]
                
                if missing_columns:
                    st.error(f"‚ùå –í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
                    st.info("üìã **–¢—Ä–µ–±—É–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏**: category, year, manufacture, consumption, code")
                else:
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
                    st.subheader("üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
                    st.dataframe(df_production.head(10), use_container_width=True)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–∞
                    if 'records' not in st.session_state:
                        st.warning("‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ**: –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–∞ (–≤–∫–ª–∞–¥–∫–∞ '–ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–∞ –†–§').")
                        st.info("üí° **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è**: –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–∞ –†–§', –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¢–ù –í–≠–î –∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑', –∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç—É –≤–∫–ª–∞–¥–∫—É.")
                    else:
                        # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
                        with st.spinner("üîÑ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è..."):
                            try:
                                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ session state
                                import_metrics_by_year = {}
                                for i, record in enumerate(st.session_state.records):
                                    year = st.session_state.years[i]
                                    import_metrics_by_year[year] = record
                                
                                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –¢–ù –í–≠–î –∏–∑ session state
                                tnved_code = st.session_state.get('tnved_code', None)
                                production_metrics = calculate_man_metrics(df_production, import_metrics_by_year, tnved_code)
                                summary_metrics = get_summary_metrics(production_metrics)
                                
                                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ session state
                                st.session_state.production_metrics = production_metrics
                                st.session_state.summary_metrics = summary_metrics
                                st.session_state.production_df = df_production
                                st.session_state.import_metrics_by_year = import_metrics_by_year
                                
                                st.success("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã!")
                                
                            except Exception as e:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –º–µ—Ç—Ä–∏–∫: {str(e)}")
                                st.stop()
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    if 'production_metrics' in st.session_state:
                        st.subheader("üìä –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
                        
                        # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                        categories = list(st.session_state.production_metrics.keys())
                        selected_category = st.selectbox(
                            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:",
                            categories,
                            key="production_category_selector"
                        )
                        
                        if selected_category:
                            category_metrics = st.session_state.production_metrics[selected_category]
                            years = sorted(category_metrics.keys())
                            
                            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                            st.subheader(f"üìà –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ - {selected_category}")
                            
                            col1, col2, col3, col4 = st.columns(4)
                            
                            with col1:
                                latest_year = max(years)
                                latest_metrics = category_metrics[latest_year]
                                st.metric(
                                    label="üè≠ –°–∞–º–æ–æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç—å",
                                    value=f"{latest_metrics['self_sufficiency']:.2f}",
                                    delta="–ü–æ–ª–Ω–∞—è" if latest_metrics['self_sufficiency'] >= 1.0 else "–ß–∞—Å—Ç–∏—á–Ω–∞—è"
                                )
                            
                            with col2:
                                st.metric(
                                    label="üì¶ –î–æ–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞",
                                    value=f"{latest_metrics['production_share']*100:.1f}%",
                                    delta="–í—ã—Å–æ–∫–∞—è" if latest_metrics['production_share'] >= 0.7 else "–°—Ä–µ–¥–Ω—è—è" if latest_metrics['production_share'] >= 0.3 else "–ù–∏–∑–∫–∞—è"
                                )
                            
                            with col3:
                                st.metric(
                                    label="üìä –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∏–º–ø–æ—Ä—Ç–∞",
                                    value=f"{latest_metrics['import_dependency']*100:.1f}%",
                                    delta="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è" if latest_metrics['import_dependency'] >= 0.3 else "–ü—Ä–∏–µ–º–ª–µ–º–∞—è"
                                )
                            
                            with col4:
                                growth_rate = latest_metrics['growth_rate']
                                if growth_rate is not None:
                                    st.metric(
                                        label="üìà –¢–µ–º–ø —Ä–æ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞",
                                        value=f"{growth_rate*100:+.1f}%",
                                        delta="–†–æ—Å—Ç" if growth_rate > 0 else "–°–Ω–∏–∂–µ–Ω–∏–µ" if growth_rate < 0 else "–°—Ç–∞–±–∏–ª—å–Ω–æ"
                                    )
                                else:
                                    st.metric(
                                        label="üìà –¢–µ–º–ø —Ä–æ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞",
                                        value="N/A",
                                        delta="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                                    )
                            
                            # –ì—Ä–∞—Ñ–∏–∫–∏
                            st.subheader("üìä –ì—Ä–∞—Ñ–∏–∫–∏ –¥–∏–Ω–∞–º–∏–∫–∏")
                            
                            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
                            production_data = [category_metrics[year]['manufacture'] for year in years]
                            consumption_data = [category_metrics[year]['consumption'] for year in years]
                            self_sufficiency_data = [category_metrics[year]['self_sufficiency'] for year in years]
                            import_dependency_data = [category_metrics[year]['import_dependency'] for year in years]
                            
                            # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
                            fig_prod_cons = create_production_chart(
                                years, production_data, consumption_data, 
                                "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ", selected_category
                            )
                            st.plotly_chart(fig_prod_cons, use_container_width=True)
                            
                            col1, col2 = st.columns(2)
                            
                            with col1:
                                # –ì—Ä–∞—Ñ–∏–∫ —Å–∞–º–æ–æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
                                fig_self_suff = create_self_sufficiency_chart(
                                    years, self_sufficiency_data, 
                                    "–°–∞–º–æ–æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç—å", selected_category
                                )
                                st.plotly_chart(fig_self_suff, use_container_width=True)
                            
                            with col2:
                                # –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–º–ø–æ—Ä—Ç–∞
                                fig_import_dep = create_import_dependency_chart(
                                    years, import_dependency_data, 
                                    "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∏–º–ø–æ—Ä—Ç–∞", selected_category
                                )
                                st.plotly_chart(fig_import_dep, use_container_width=True)
                            
                            # –†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
                            st.subheader("üéØ –†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –º–µ—Ç—Ä–∏–∫")
                            fig_radar = create_metrics_radar_chart(latest_metrics, selected_category)
                            st.plotly_chart(fig_radar, use_container_width=True)
                            
                            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫
                            st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫")
                            
                            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            metrics_table_data = []
                            for year in years:
                                year_metrics = category_metrics[year]
                                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≥–æ–¥–∞
                                import_val = 0
                                if 'import_metrics_by_year' in st.session_state and year in st.session_state.import_metrics_by_year:
                                    import_val = st.session_state.import_metrics_by_year[year].get('import_total', 0)
                                
                                metrics_table_data.append({
                                    '–ì–æ–¥': year,
                                    '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ': f"{year_metrics['manufacture']:,.0f}",
                                    '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ': f"{year_metrics['consumption']:,.0f}",
                                    '–ò–º–ø–æ—Ä—Ç': f"{import_val:,.0f}",
                                    '–°–∞–º–æ–æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç—å': f"{year_metrics['self_sufficiency']:.3f}",
                                    '–î–æ–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞': f"{year_metrics['production_share']:.3f}",
                                    '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∏–º–ø–æ—Ä—Ç–∞': f"{year_metrics['import_dependency']:.3f}",
                                    '–¢–µ–º–ø —Ä–æ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞': f"{year_metrics['growth_rate']:.3f}" if year_metrics['growth_rate'] is not None else "N/A",
                                    '–ò–Ω–¥–µ–∫—Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏': f"{year_metrics['competitiveness_index']:.3f}" if year_metrics['competitiveness_index'] is not None else "N/A"
                                })
                            
                            metrics_df = pd.DataFrame(metrics_table_data)
                            st.dataframe(metrics_df, use_container_width=True)
                        
                        # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                        st.subheader("üìä –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
                        
                        summary_data = []
                        for category, metrics in st.session_state.summary_metrics.items():
                            summary_data.append({
                                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': category,
                                '–ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥': metrics['latest_year'],
                                '–°–∞–º–æ–æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç—å': f"{metrics['self_sufficiency']:.3f}",
                                '–î–æ–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞': f"{metrics['production_share']:.3f}",
                                '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∏–º–ø–æ—Ä—Ç–∞': f"{metrics['import_dependency']:.3f}",
                                '–¢–µ–º–ø —Ä–æ—Å—Ç–∞': f"{metrics['growth_rate']:.3f}" if metrics['growth_rate'] is not None else "N/A",
                                '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å': f"{metrics['competitiveness_index']:.3f}" if metrics['competitiveness_index'] is not None else "N/A"
                            })
                        
                        summary_df = pd.DataFrame(summary_data)
                        st.dataframe(summary_df, use_container_width=True)
                        
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
                st.info("üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞**: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CSV –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏.")
        else:
            st.info("üìÅ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è**: –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞.")
            
            # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞
            st.subheader("üìã –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã CSV —Ñ–∞–π–ª–∞")
            example_data = {
                'category': ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏', '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏'],
                'year': [2021, 2022, 2021, 2022],
                'manufacture': [1000000, 1200000, 500000, 600000],
                'consumption': [1500000, 1800000, 800000, 900000],
                'code': ['8528', '8528', '8703', '8703']
            }
            example_df = pd.DataFrame(example_data)
            st.dataframe(example_df, use_container_width=True)
            
            st.markdown("""
            **–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫:**
            - `category` - –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞
            - `year` - –≥–æ–¥ –¥–∞–Ω–Ω—ã—Ö
            - `manufacture` - –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (–≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è)
            - `consumption` - –æ–±—ä–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è (–≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è)
            - `code` - –∫–æ–¥ –¢–ù –í–≠–î —Ç–æ–≤–∞—Ä–∞
            
            **–í–∞–∂–Ω–æ:** –î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –∏–º–ø–æ—Ä—Ç–∞ (–≤–∫–ª–∞–¥–∫–∞ '–ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–∞ –†–§').
            –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞ –¢–ù –í–≠–î.
            –ö–æ–¥ –¢–ù –í–≠–î –≤ CSV —Ñ–∞–π–ª–µ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∫–æ–¥–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º –≤ –∞–Ω–∞–ª–∏–∑–µ –∏–º–ø–æ—Ä—Ç–∞.
            """)
    
    with tab4:
        st.header("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–µ—Ä–∞–º –¢–¢–†")
        latest_year = st.session_state.years[-1]
        st.info(f"üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**: –í –¥–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ {latest_year} –≥–æ–¥ —Å –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–µ—Ä —Ç–∞–º–æ–∂–µ–Ω–Ω–æ-—Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è. –¢—Ä–µ–Ω–¥—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –∑–∞ 3-–ª–µ—Ç–Ω–∏–π –ø–µ—Ä–∏–æ–¥.")
        st.divider()
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç LLM
        col1, col2 = st.columns([1, 1])
        
        with col1:
            get_recommendations = st.button("ü§ñ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò", type="primary", use_container_width=True)
        
        with col2:
            show_metrics_table = st.checkbox("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –º–µ—Ç—Ä–∏–∫", value=True, key="show_metrics_table")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç LLM
        if get_recommendations:
            with st.spinner("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..."):
                try:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è LLM
                    metrics_text = format_metrics_for_llm()
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç LLM
                    llm_recommendations = get_llm_answer(metrics_text)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ session state
                    st.session_state.llm_recommendations = llm_recommendations
                    
                    st.success("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!")
                    
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}")
                    st.info("üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞**: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –∫–ª—é—á –¥–ª—è GigaChat –≤ —Ñ–∞–π–ª–µ .env")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ API –∫–ª—é—á–∞
                    with st.expander("üîß –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ API –∫–ª—é—á–∞ GigaChat"):
                        st.markdown("""
                        **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç –ò–ò –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á GigaChat:**
                        
                        1. **–ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á:**
                           - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://developers.sber.ru/portal/products/gigachat
                           - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç
                           - –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á
                        
                        2. **–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª `.env`:**
                           - –í –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª `.env`
                           - –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ —Å—Ç—Ä–æ–∫—É: `GIGACHAT_API_KEY=–≤–∞—à_api_–∫–ª—é—á`
                        
                        3. **–ü—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ `.env`:**
                           ```
                           GIGACHAT_API_KEY=your_actual_api_key_here
                           ```
                        
                        4. **–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ** –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ `.env`
                        
                        **–í–∞–∂–Ω–æ:** 
                        - –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –∑–Ω–∞–∫–∞ `=`
                        - –ù–µ –∫–æ–º–º–∏—Ç—å—Ç–µ —Ñ–∞–π–ª `.env` –≤ git (–æ–Ω —É–∂–µ –≤ .gitignore)
                        - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ GigaChat API
                        """)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç LLM
        if 'llm_recommendations' in st.session_state:
            st.subheader("ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò")
            st.markdown("---")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            st.markdown(st.session_state.llm_recommendations)
            
            st.markdown("---")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –º–µ—Ç—Ä–∏–∫ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if show_metrics_table:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –º–µ—Ç—Ä–∏–∫
            def create_metrics_table():
                """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏"""
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ (—Å–∞–º—ã–π –Ω–æ–≤—ã–π –≥–æ–¥)
                latest_record = st.session_state.records[-1]
                trends = st.session_state.trends
                latest_year = st.session_state.years[-1]  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥
            
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–µ—Ç—Ä–∏–∫
                metrics_data = []
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ (—Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥)
                metrics_data.extend([
                    {
                        "–ú–µ—Ç—Ä–∏–∫–∞": "import_total",
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": "–û–±—ä—ë–º –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω",
                        "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{latest_record['import_total']:,.0f} $".replace(",", " "),
                        "–¢—Ä–µ–Ω–¥": trends['trends']['import_total']['label'],
                        "–û–ø–∏—Å–∞–Ω–∏–µ": f"–û–±—â–∏–π –æ–±—ä—ë–º –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–∞ –≤ —Å—Ç–æ–∏–º–æ—Å—Ç–Ω–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞ {latest_year} –≥–æ–¥"
                    },
                    {
                        "–ú–µ—Ç—Ä–∏–∫–∞": "import_friendly", 
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": "–ò–º–ø–æ—Ä—Ç –∏–∑ –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω",
                        "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{latest_record['import_friendly']:,.0f} $".replace(",", " "),
                        "–¢—Ä–µ–Ω–¥": "N/A",
                        "–û–ø–∏—Å–∞–Ω–∏–µ": f"–û–±—ä—ë–º –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ —Å—Ç—Ä–∞–Ω, –Ω–µ –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö –≤ –ø–µ—Ä–µ—á–µ–Ω—å –Ω–µ–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞ {latest_year} –≥–æ–¥"
                    },
                    {
                        "–ú–µ—Ç—Ä–∏–∫–∞": "import_unfriendly",
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": "–ò–º–ø–æ—Ä—Ç –∏–∑ –Ω–µ–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω", 
                        "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{latest_record['import_unfriendly']:,.0f} $".replace(",", " "),
                        "–¢—Ä–µ–Ω–¥": "N/A",
                        "–û–ø–∏—Å–∞–Ω–∏–µ": f"–û–±—ä—ë–º –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ —Å—Ç—Ä–∞–Ω –ø–æ –ø–µ—Ä–µ—á–Ω—é —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏—è ‚Ññ 430-—Ä –∑–∞ {latest_year} –≥–æ–¥"
                    },
                    {
                        "–ú–µ—Ç—Ä–∏–∫–∞": "import_china",
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": "–ò–º–ø–æ—Ä—Ç –∏–∑ –ö–∏—Ç–∞—è",
                        "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{latest_record['import_china']:,.0f} $".replace(",", " "),
                        "–¢—Ä–µ–Ω–¥": "N/A", 
                        "–û–ø–∏—Å–∞–Ω–∏–µ": f"–û–±—ä—ë–º –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ö–∏—Ç–∞–π—Å–∫–æ–π –ù–∞—Ä–æ–¥–Ω–æ–π –†–µ—Å–ø—É–±–ª–∏–∫–∏ –∑–∞ {latest_year} –≥–æ–¥"
                    }
                ])
            
                # –î–æ–ª–∏ –∏–º–ø–æ—Ä—Ç–∞ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥)
                metrics_data.extend([
                    {
                        "–ú–µ—Ç—Ä–∏–∫–∞": "share_unfriendly",
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": "–î–æ–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –Ω–µ–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω",
                        "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{latest_record['share_unfriendly']*100:.1f}%",
                        "–¢—Ä–µ–Ω–¥": trends['trends']['share_unfriendly']['label'],
                        "–û–ø–∏—Å–∞–Ω–∏–µ": f"–î–æ–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –Ω–µ–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –≤ –æ–±—â–µ–º –æ–±—ä—ë–º–µ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞ {latest_year} –≥–æ–¥. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥: 30%"
                    },
                    {
                        "–ú–µ—Ç—Ä–∏–∫–∞": "share_china", 
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": "–î–æ–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –ö–∏—Ç–∞—è",
                        "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{latest_record['share_china']*100:.1f}%",
                        "–¢—Ä–µ–Ω–¥": trends['trends']['share_china']['label'],
                        "–û–ø–∏—Å–∞–Ω–∏–µ": f"–î–æ–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –ö–∏—Ç–∞—è –≤ –æ–±—â–µ–º –æ–±—ä—ë–º–µ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞ {latest_year} –≥–æ–¥. –í–∞–∂–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω—Ç–∏–¥–µ–º–ø–∏–Ω–≥–æ–≤—ã—Ö –º–µ—Ä"
                    }
                ])
            
                # –¶–µ–Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥)
                price_metrics = []
                if not np.isnan(latest_record['price_china']):
                    price_metrics.append({
                        "–ú–µ—Ç—Ä–∏–∫–∞": "price_china",
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": "–°—Ä–µ–¥–Ω—è—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –∏–∑ –ö–∏—Ç–∞—è",
                        "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{latest_record['price_china']:.2f} $/–µ–¥.",
                        "–¢—Ä–µ–Ω–¥": "N/A",
                        "–û–ø–∏—Å–∞–Ω–∏–µ": f"–°—Ä–µ–¥–Ω—è—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö –∏–∑ –ö–∏—Ç–∞—è —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ {latest_year} –≥–æ–¥ (primaryValue/qty)"
                    })
                
                if not np.isnan(latest_record['price_others']):
                    price_metrics.append({
                        "–ú–µ—Ç—Ä–∏–∫–∞": "price_others",
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": "–°—Ä–µ–¥–Ω—è—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –∏–∑ –ø—Ä–æ—á–∏—Ö —Å—Ç—Ä–∞–Ω",
                        "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{latest_record['price_others']:.2f} $/–µ–¥.",
                        "–¢—Ä–µ–Ω–¥": "N/A", 
                        "–û–ø–∏—Å–∞–Ω–∏–µ": f"–°—Ä–µ–¥–Ω—è—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö –∏–∑ –ø—Ä–æ—á–∏—Ö —Å—Ç—Ä–∞–Ω —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ {latest_year} –≥–æ–¥ (primaryValue/qty)"
                    })
                
                if not np.isnan(latest_record['price_diff_ratio']):
                    dumping_status = "–î–µ–º–ø–∏–Ω–≥" if latest_record['price_diff_ratio'] < 1.0 else "–ù–æ—Ä–º–∞"
                    price_metrics.append({
                        "–ú–µ—Ç—Ä–∏–∫–∞": "price_diff_ratio",
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": "–û—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω (–ö–∏—Ç–∞–π / –ø—Ä–æ—á–∏–µ)",
                        "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{latest_record['price_diff_ratio']:.2f}",
                        "–¢—Ä–µ–Ω–¥": dumping_status,
                        "–û–ø–∏—Å–∞–Ω–∏–µ": f"–û—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –∏–∑ –ö–∏—Ç–∞—è –∫ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ –∏–∑ –ø—Ä–æ—á–∏—Ö —Å—Ç—Ä–∞–Ω –∑–∞ {latest_year} –≥–æ–¥. < 1.0 —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥–µ–º–ø–∏–Ω–≥"
                    })
                
                metrics_data.extend(price_metrics)
            
                # –§–ª–∞–≥–∏ –¥–ª—è –º–µ—Ä –¢–¢–†
                flags_data = []
                for flag_key, flag_value in trends['flags'].items():
                    flag_name = flag_key.replace("for_measure_", "–ú–µ—Ä–∞ ").replace(":", ": ").replace("_", " ").title()
                    flags_data.append({
                        "–ú–µ—Ç—Ä–∏–∫–∞": flag_key,
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": flag_name,
                        "–ó–Ω–∞—á–µ–Ω–∏–µ": str(flag_value),
                        "–¢—Ä–µ–Ω–¥": "N/A",
                        "–û–ø–∏—Å–∞–Ω–∏–µ": f"–§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç–∏ –º–µ—Ä –¢–¢–†: {flag_key}"
                    })
                
                metrics_data.extend(flags_data)
            
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                if 'production_metrics' in st.session_state:
                    production_metrics = st.session_state.production_metrics
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
                    metrics_data.append({
                        "–ú–µ—Ç—Ä–∏–∫–∞": "production_header",
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": "=== –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–°–¢–í–ê –ò –ü–û–¢–†–ï–ë–õ–ï–ù–ò–Ø ===",
                        "–ó–Ω–∞—á–µ–Ω–∏–µ": "---",
                        "–¢—Ä–µ–Ω–¥": "---",
                        "–û–ø–∏—Å–∞–Ω–∏–µ": "–ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –†–§"
                    })
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    for category, category_metrics in production_metrics.items():
                        latest_year = max(category_metrics.keys())
                        latest_metrics = category_metrics[latest_year]
                        
                        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
                        production_metrics_list = [
                            {
                                "–ú–µ—Ç—Ä–∏–∫–∞": f"production_self_sufficiency_{category}",
                                "–ù–∞–∑–≤–∞–Ω–∏–µ": f"–°–∞–º–æ–æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç—å ({category})",
                                "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{latest_metrics['self_sufficiency']:.3f}",
                                "–¢—Ä–µ–Ω–¥": "N/A",
                                "–û–ø–∏—Å–∞–Ω–∏–µ": f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∞–º–æ–æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –∑–∞ {latest_year} –≥–æ–¥ (–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ/–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ)"
                            },
                            {
                                "–ú–µ—Ç—Ä–∏–∫–∞": f"production_share_{category}",
                                "–ù–∞–∑–≤–∞–Ω–∏–µ": f"–î–æ–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ ({category})",
                                "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{latest_metrics['production_share']:.3f}",
                                "–¢—Ä–µ–Ω–¥": "N/A",
                                "–û–ø–∏—Å–∞–Ω–∏–µ": f"–î–æ–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –≤ –æ–±—â–µ–º –æ–±—ä–µ–º–µ (–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ + –∏–º–ø–æ—Ä—Ç) –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –∑–∞ {latest_year} –≥–æ–¥"
                            },
                            {
                                "–ú–µ—Ç—Ä–∏–∫–∞": f"production_import_dependency_{category}",
                                "–ù–∞–∑–≤–∞–Ω–∏–µ": f"–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∏–º–ø–æ—Ä—Ç–∞ ({category})",
                                "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{latest_metrics['import_dependency']:.3f}",
                                "–¢—Ä–µ–Ω–¥": "N/A",
                                "–û–ø–∏—Å–∞–Ω–∏–µ": f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –∑–∞ {latest_year} –≥–æ–¥ (–∏–º–ø–æ—Ä—Ç/–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ)"
                            },
                            {
                                "–ú–µ—Ç—Ä–∏–∫–∞": f"production_growth_rate_{category}",
                                "–ù–∞–∑–≤–∞–Ω–∏–µ": f"–¢–µ–º–ø —Ä–æ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ ({category})",
                                "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{latest_metrics['growth_rate']:.3f}" if latest_metrics['growth_rate'] is not None else "N/A",
                                "–¢—Ä–µ–Ω–¥": "N/A",
                                "–û–ø–∏—Å–∞–Ω–∏–µ": f"–¢–µ–º–ø —Ä–æ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –∑–∞ {latest_year} –≥–æ–¥"
                            },
                            {
                                "–ú–µ—Ç—Ä–∏–∫–∞": f"production_competitiveness_{category}",
                                "–ù–∞–∑–≤–∞–Ω–∏–µ": f"–ò–Ω–¥–µ–∫—Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ ({category})",
                                "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{latest_metrics['competitiveness_index']:.3f}" if latest_metrics['competitiveness_index'] is not None else "N/A",
                                "–¢—Ä–µ–Ω–¥": "N/A",
                                "–û–ø–∏—Å–∞–Ω–∏–µ": f"–ò–Ω–¥–µ–∫—Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –∑–∞ {latest_year} –≥–æ–¥ (–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ/–∏–º–ø–æ—Ä—Ç)"
                            },
                            {
                                "–ú–µ—Ç—Ä–∏–∫–∞": f"production_self_sufficiency_index_{category}",
                                "–ù–∞–∑–≤–∞–Ω–∏–µ": f"–ò–Ω–¥–µ–∫—Å —Å–∞–º–æ–æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ ({category})",
                                "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{latest_metrics['self_sufficiency_index']:.3f}",
                                "–¢—Ä–µ–Ω–¥": "N/A",
                                "–û–ø–∏—Å–∞–Ω–∏–µ": f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å–∞–º–æ–æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –∑–∞ {latest_year} –≥–æ–¥ (0-1)"
                            }
                        ]
                        
                        metrics_data.extend(production_metrics_list)
                
                return pd.DataFrame(metrics_data)
        
            # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            metrics_df = create_metrics_table()
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            st.subheader("üìã –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            filter_options = ["–í—Å–µ –º–µ—Ç—Ä–∏–∫–∏", "–ò–º–ø–æ—Ä—Ç", "–î–æ–ª–∏", "–¶–µ–Ω—ã", "–§–ª–∞–≥–∏ –¢–¢–†"]
            if 'production_metrics' in st.session_state:
                filter_options.append("–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ")
            
            category_filter = st.selectbox(
                "–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:",
                filter_options,
                key="metrics_filter"
            )
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            if category_filter == "–ò–º–ø–æ—Ä—Ç":
                filtered_df = metrics_df[metrics_df['–ú–µ—Ç—Ä–∏–∫–∞'].str.contains('import_')]
            elif category_filter == "–î–æ–ª–∏":
                filtered_df = metrics_df[metrics_df['–ú–µ—Ç—Ä–∏–∫–∞'].str.contains('share_')]
            elif category_filter == "–¶–µ–Ω—ã":
                filtered_df = metrics_df[metrics_df['–ú–µ—Ç—Ä–∏–∫–∞'].str.contains('price_')]
            elif category_filter == "–§–ª–∞–≥–∏ –¢–¢–†":
                filtered_df = metrics_df[metrics_df['–ú–µ—Ç—Ä–∏–∫–∞'].str.contains('for_measure_')]
            elif category_filter == "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ":
                filtered_df = metrics_df[metrics_df['–ú–µ—Ç—Ä–∏–∫–∞'].str.contains('production_')]
            else:
                filtered_df = metrics_df
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            st.dataframe(
                filtered_df,
                use_container_width=True,
                column_config={
                    "–ú–µ—Ç—Ä–∏–∫–∞": st.column_config.TextColumn("–ö–æ–¥ –º–µ—Ç—Ä–∏–∫–∏", width="small"),
                    "–ù–∞–∑–≤–∞–Ω–∏–µ": st.column_config.TextColumn("–ù–∞–∑–≤–∞–Ω–∏–µ", width="medium"),
                    "–ó–Ω–∞—á–µ–Ω–∏–µ": st.column_config.TextColumn("–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", width="medium"),
                    "–¢—Ä–µ–Ω–¥": st.column_config.TextColumn("–¢—Ä–µ–Ω–¥/–°—Ç–∞—Ç—É—Å", width="small"),
                    "–û–ø–∏—Å–∞–Ω–∏–µ": st.column_config.TextColumn("–û–ø–∏—Å–∞–Ω–∏–µ", width="large")
                }
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            st.subheader("‚ÑπÔ∏è –ü–æ—è—Å–Ω–µ–Ω–∏—è –∫ –º–µ—Ç—Ä–∏–∫–∞–º")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("""
                **–ö–ª—é—á–µ–≤—ã–µ –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:**
                - –î–æ–ª—è –ù–° > 30% ‚Üí –ú–µ—Ä–∞ –¢–¢–† ‚Ññ2
                - –î–æ–ª—è –ö–∏—Ç–∞—è —Ä–∞—Å—Ç—ë—Ç + –¥–µ–º–ø–∏–Ω–≥ ‚Üí –ú–µ—Ä–∞ –¢–¢–† ‚Ññ3  
                - –û—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω < 1.0 ‚Üí –î–µ–º–ø–∏–Ω–≥
                - –†–æ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ + —Ä–æ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ ‚Üí –ú–µ—Ä–∞ –¢–¢–† ‚Ññ5
                """)
            
            with col2:
                st.markdown("""
                **–¢—Ä–µ–Ω–¥—ã:**
                - **–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π** - —Ä–æ—Å—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
                - **–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π** - —Å–Ω–∏–∂–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è  
                - **–°—Ç–∞–±–∏–ª—å–Ω—ã–π** - –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                - **N/A** - —Ç—Ä–µ–Ω–¥ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è
                """)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–¥–∞—Ö –∞–Ω–∞–ª–∏–∑–∞
            st.info(f"üìÖ **–ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –∑–∞**: {st.session_state.years[-1]} –≥–æ–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π)")
            st.info(f"üìà **–¢—Ä–µ–Ω–¥—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –∑–∞ –ø–µ—Ä–∏–æ–¥**: {st.session_state.years[0]} - {st.session_state.years[2]} –≥–æ–¥—ã")
            st.info(f"üî¢ **–ö–æ–¥ –¢–ù –í–≠–î**: {st.session_state.tnved_code}")

# –§—É—Ç–µ—Ä
st.divider()
col1, col2, col3 = st.columns([1, 2, 1])
with col2:
    st.markdown("üìä **–ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–∞ –†–§** | –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Streamlit")
    st.caption("–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã UN Comtrade API")
