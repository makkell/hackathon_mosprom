import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from import_ru import download_by_tnved, mark_friendly
from calc_import_metrics import calc_import_metrics
from draw_image import summarize_trends, pie_friendly_unfriendly_with_china

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
def create_pie_chart(df_year, year):
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ–¥–∞"""
    CHINA = 'China'
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    d = df_year.copy()
    d['primaryValue'] = pd.to_numeric(d['primaryValue'], errors="coerce").fillna(0)
    
    # –ú–∞—Å–∫–∏
    mask_china = d['reporterDesc'].str.contains(CHINA, na=False)
    mask_friend = d['isFriendly'] == 1
    
    # –°—É–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    val_china = float(d.loc[mask_china, 'primaryValue'].sum())
    val_friend_other = float(d.loc[mask_friend & ~mask_china, 'primaryValue'].sum())
    val_unfriendly = float(d.loc[~mask_friend, 'primaryValue'].sum())
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    labels = ["–ö–∏—Ç–∞–π", "–î—Ä—É–≥–∏–µ –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ", "–ù–µ–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ"]
    values = [val_china, val_friend_other, val_unfriendly]
    colors = ['#FF6B6B', '#4ECDC4', '#45B7D1']
    
    fig = go.Figure(data=[go.Pie(
        labels=labels,
        values=values,
        hole=0.3,
        marker_colors=colors,
        textinfo='label+percent+value',
        textfont_size=14,
        marker_line=dict(color='white', width=2)
    )])
    
    fig.update_layout(
        title=dict(
            text=f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏, {year}",
            font=dict(size=16, color='#2c3e50'),
            x=0.5,
            xanchor='center'
        ),
        font=dict(size=12),
        showlegend=True,
        height=450,
        legend=dict(
            orientation="v",
            yanchor="middle",
            y=0.5,
            xanchor="left",
            x=1.02
        )
    )
    
    return fig

def create_total_pie_chart(df1, df2, df3):
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—â—É—é –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –∑–∞ –≤—Å–µ –≥–æ–¥—ã"""
    CHINA = 'China'
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    df_total = pd.concat([df1, df2, df3], ignore_index=True)
    df_total['primaryValue'] = pd.to_numeric(df_total['primaryValue'], errors="coerce").fillna(0)
    
    # –ú–∞—Å–∫–∏
    mask_china = df_total['reporterDesc'].str.contains(CHINA, na=False)
    mask_friend = df_total['isFriendly'] == 1
    
    # –°—É–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    val_china = float(df_total.loc[mask_china, 'primaryValue'].sum())
    val_friend_other = float(df_total.loc[mask_friend & ~mask_china, 'primaryValue'].sum())
    val_unfriendly = float(df_total.loc[~mask_friend, 'primaryValue'].sum())
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    labels = ["–ö–∏—Ç–∞–π", "–î—Ä—É–≥–∏–µ –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ", "–ù–µ–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ"]
    values = [val_china, val_friend_other, val_unfriendly]
    colors = ['#FF6B6B', '#4ECDC4', '#45B7D1']
    
    fig = go.Figure(data=[go.Pie(
        labels=labels,
        values=values,
        hole=0.3,
        marker_colors=colors,
        textinfo='label+percent+value',
        textfont_size=16,
        marker_line=dict(color='white', width=3)
    )])
    
    fig.update_layout(
        title=dict(
            text="–û–±—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞ 3 –≥–æ–¥–∞",
            font=dict(size=18, color='#2c3e50'),
            x=0.5,
            xanchor='center'
        ),
        font=dict(size=14),
        showlegend=True,
        height=550,
        legend=dict(
            orientation="v",
            yanchor="middle",
            y=0.5,
            xanchor="left",
            x=1.02
        )
    )
    
    return fig

def create_trend_chart(years, values, title, emoji):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞"""
    fig = go.Figure()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    if "–∏–º–ø–æ—Ä—Ç" in title.lower():
        color = '#1f77b4'
        gradient_color = 'rgba(31, 119, 180, 0.2)'
    elif "–Ω–µ–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö" in title.lower():
        color = '#FF6B6B'
        gradient_color = 'rgba(255, 107, 107, 0.2)'
    elif "–∫–∏—Ç–∞—è" in title.lower():
        color = '#4ECDC4'
        gradient_color = 'rgba(78, 205, 196, 0.2)'
    else:
        color = '#45B7D1'
        gradient_color = 'rgba(69, 183, 209, 0.2)'
    
    fig.add_trace(go.Scatter(
        x=years,
        y=values,
        mode='lines+markers',
        name=title,
        line=dict(color=color, width=4, shape='spline'),
        marker=dict(
            size=12, 
            color=color,
            line=dict(color='white', width=2)
        ),
        fill='tonexty',
        fillcolor=gradient_color,
        hovertemplate=f'<b>{emoji} {title}</b><br>–ì–æ–¥: %{{x}}<br>–ó–Ω–∞—á–µ–Ω–∏–µ: %{{y}}<extra></extra>'
    ))
    
    fig.update_layout(
        title=dict(
            text=f"{emoji} {title}",
            font=dict(size=16, color='#2c3e50'),
            x=0.5,
            xanchor='center'
        ),
        xaxis=dict(
            title=dict(text="–ì–æ–¥", font=dict(size=14, color='#2c3e50')),
            tickfont=dict(size=12),
            gridcolor='rgba(128,128,128,0.2)'
        ),
        yaxis=dict(
            title=dict(text=title, font=dict(size=14, color='#2c3e50')),
            tickfont=dict(size=12),
            gridcolor='rgba(128,128,128,0.2)'
        ),
        font=dict(size=12),
        height=450,
        hovermode='x unified',
        showlegend=False
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    for i, (year, value) in enumerate(zip(years, values)):
        fig.add_annotation(
            x=year,
            y=value,
            text=f"<b>{value:.1f}</b>",
            showarrow=True,
            arrowhead=2,
            arrowsize=1.5,
            arrowwidth=2,
            arrowcolor=color,
            ax=0,
            ay=-40,
            font=dict(size=12, color=color),
            bgcolor='white',
            bordercolor=color,
            borderwidth=1
        )
    
    return fig

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–∞ –†–§",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
st.markdown("""
<style>
    .stTabs [data-baseweb="tab"] {
        background-color: #f0f2f6;
        color: #262730;
        font-weight: 600;
    }
    .stTabs [aria-selected="true"] {
        background-color: #1f77b4;
        color: white;
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üìä –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–∞ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
with st.sidebar:
    st.markdown("### üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
    
    # –í–≤–æ–¥ –∫–æ–¥–∞ –¢–ù –í–≠–î
    st.markdown("**–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¢–ù –í–≠–î:**")
    tnved_code = st.text_input(
        "–ö–æ–¥ –¢–ù –í–≠–î", 
        value="842810", 
        help="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–æ–≤–∞—Ä–Ω–æ–π –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –≤–Ω–µ—à–Ω–µ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8528)"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    analyze_button = st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary", use_container_width=True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–¥–µ
    st.markdown("---")
    st.markdown("### ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    st.info("""
    **–ö–æ–¥ 8528** - –ú–æ–Ω–∏—Ç–æ—Ä—ã –∏ –ø—Ä–æ–µ–∫—Ç–æ—Ä—ã, –Ω–µ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –≤ –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    
    **–î—Ä—É–≥–∏–µ –ø—Ä–∏–º–µ—Ä—ã:**
    - 8517 - –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –∞–ø–ø–∞—Ä–∞—Ç—ã
    - 8471 - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—à–∏–Ω—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    - 8703 - –õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
    """)

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
if analyze_button:
    if not tnved_code or not tnved_code.isdigit():
        st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –¢–ù –í–≠–î (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
    else:
        with st.spinner("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑..."):
            try:
                # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                df = download_by_tnved(tnved_code)
                df = mark_friendly(df)
                
                if df.empty:
                    st.error("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–æ–¥—É –¢–ù –í–≠–î –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                else:
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    col = ['refYear', 'reporterDesc', 'isFriendly', 'primaryValue', 'qty', 'qtyUnitCode', 'netWgt','partnerDesc']
                    df_proc = df[col].copy()
                    
                    now = datetime.now()
                    years = [now.year - 3, now.year - 2, now.year - 1]  # [2021, 2022, 2023] - –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
                    
                    df_proc_year_1 = df_proc[df_proc['refYear'] == years[0]].sort_values(by='primaryValue', ascending=False).copy()  # 2021
                    df_proc_year_2 = df_proc[df_proc['refYear'] == years[1]].sort_values(by='primaryValue', ascending=False).copy()  # 2022
                    df_proc_year_3 = df_proc[df_proc['refYear'] == years[2]].sort_values(by='primaryValue', ascending=False).copy()  # 2023
                    
                    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
                    records = []
                    records.append(calc_import_metrics(df_proc_year_1))  # 2021
                    records.append(calc_import_metrics(df_proc_year_2))  # 2022
                    records.append(calc_import_metrics(df_proc_year_3))  # 2023
                    
                    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
                    res = summarize_trends(records, plot=False)
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ session state
                    st.session_state.df_proc_year_1 = df_proc_year_1
                    st.session_state.df_proc_year_2 = df_proc_year_2
                    st.session_state.df_proc_year_3 = df_proc_year_3
                    st.session_state.records = records
                    st.session_state.trends = res
                    st.session_state.tnved_code = tnved_code
                    st.session_state.years = years  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    
                    st.success(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –∫–æ–¥–∞ –¢–ù –í–≠–î: {tnved_code}")
                    st.info(f"üìÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ –≥–æ–¥—ã: {years[0]}, {years[1]}, {years[2]}")
                    
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
if 'trends' in st.session_state:
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    tab1, tab2 = st.tabs(["üìà –û–±–∑–æ—Ä", "üìä –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–∞ –†–§"])
    
    with tab1:
        st.header("üìã –ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä")
        st.divider()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            total_import = st.session_state.records[-1]['import_total']
            st.metric(
                label="üí∞ –û–±—â–∏–π –∏–º–ø–æ—Ä—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥)",
                value=f"{total_import:,.0f} $".replace(",", " "),
                delta=f"{st.session_state.trends['trends']['import_total']['delta_pct']*100:+.1f}%" if not np.isnan(st.session_state.trends['trends']['import_total']['delta_pct']) else "N/A"
            )
        
        with col2:
            share_unfriendly = st.session_state.records[-1]['share_unfriendly']
            st.metric(
                label="üö´ –î–æ–ª—è –Ω–µ–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω",
                value=f"{share_unfriendly*100:.1f}%",
                delta=f"{st.session_state.trends['trends']['share_unfriendly']['delta_pct']*100:+.1f}%" if not np.isnan(st.session_state.trends['trends']['share_unfriendly']['delta_pct']) else "N/A"
            )
        
        with col3:
            share_china = st.session_state.records[-1]['share_china']
            st.metric(
                label="üá®üá≥ –î–æ–ª—è –ö–∏—Ç–∞—è",
                value=f"{share_china*100:.1f}%",
                delta=f"{st.session_state.trends['trends']['share_china']['delta_pct']*100:+.1f}%" if not np.isnan(st.session_state.trends['trends']['share_china']['delta_pct']) else "N/A"
            )
        
        with col4:
            price_ratio = st.session_state.records[-1]['price_diff_ratio']
            if not np.isnan(price_ratio):
                st.metric(
                    label="üí± –û—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω (–ö–∏—Ç–∞–π/–¥—Ä—É–≥–∏–µ)",
                    value=f"{price_ratio:.2f}",
                    delta="–î–µ–º–ø–∏–Ω–≥" if price_ratio < 1.0 else "–ù–æ—Ä–º–∞"
                )
            else:
                st.metric(
                    label="üí± –û—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω",
                    value="N/A",
                    delta="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–¥–∞—Ö
        st.header("üìà –¢—Ä–µ–Ω–¥—ã –∑–∞ 3 –≥–æ–¥–∞")
        st.divider()
        
        trends_data = []
        for key, trend in st.session_state.trends['trends'].items():
            trends_data.append({
                '–ú–µ—Ç—Ä–∏–∫–∞': trend['title'],
                '–¢—Ä–µ–Ω–¥': trend['label'],
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)': f"{trend['delta_pct']*100:+.1f}%" if not np.isnan(trend['delta_pct']) else "N/A",
                'CAGR (%)': f"{trend['cagr']*100:+.1f}%" if not np.isnan(trend['cagr']) else "N/A"
            })
        
        trends_df = pd.DataFrame(trends_data)
        st.dataframe(trends_df, use_container_width=True)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        st.info("üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞**: –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ –æ–∑–Ω–∞—á–∞–µ—Ç —Ä–æ—Å—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π - —Å–Ω–∏–∂–µ–Ω–∏–µ, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π - –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
    
    with tab2:
        st.header("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–∞ –†–§")
        st.info("üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**: –ì—Ä–∞—Ñ–∏–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–º–ø–æ—Ä—Ç–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º –∏ –¥–∏–Ω–∞–º–∏–∫—É –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –≥–æ–¥–∞.")
        st.divider()
        
        # –ì—Ä–∞—Ñ–∏–∫–∏ –ø–∏—Ä–æ–≥–∞ –ø–æ –≥–æ–¥–∞–º
        st.header("ü•ß –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ –≥–æ–¥–∞–º")
        st.caption("–ö—Ä—É–≥–æ–≤—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –¥–æ–ª—é –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç—Ä–∞–Ω –≤ –æ–±—â–µ–º –æ–±—ä–µ–º–µ –∏–º–ø–æ—Ä—Ç–∞")
        st.divider()
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≥–æ–¥–∞ (2021)
            if not st.session_state.df_proc_year_1.empty:
                fig1 = create_pie_chart(st.session_state.df_proc_year_1, st.session_state.years[0])
                st.plotly_chart(fig1, use_container_width=True)
        
        with col2:
            # –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≥–æ–¥–∞ (2022)
            if not st.session_state.df_proc_year_2.empty:
                fig2 = create_pie_chart(st.session_state.df_proc_year_2, st.session_state.years[1])
                st.plotly_chart(fig2, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ –≥–æ–¥–∞ (2023)
        if not st.session_state.df_proc_year_3.empty:
            fig3 = create_pie_chart(st.session_state.df_proc_year_3, st.session_state.years[2])
            st.plotly_chart(fig3, use_container_width=True)
        
        # –û–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –≤—Å–µ –≥–æ–¥—ã
        st.header("üìä –û–±—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞ 3 –≥–æ–¥–∞")
        st.caption("–°–≤–æ–¥–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–º–ø–æ—Ä—Ç–∞ –∑–∞ –≤–µ—Å—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥")
        st.divider()
        fig_total = create_total_pie_chart(st.session_state.df_proc_year_1, st.session_state.df_proc_year_2, st.session_state.df_proc_year_3)
        st.plotly_chart(fig_total, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤
        st.header("üìà –¢—Ä–µ–Ω–¥—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º")
        st.caption("–õ–∏–Ω–µ–π–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –¥–∏–Ω–∞–º–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏")
        st.divider()
        
        # –ì—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        fig_import = create_trend_chart(
            st.session_state.trends['years'],
            [r['import_total'] for r in st.session_state.records],
            "–û–±—â–∏–π –∏–º–ø–æ—Ä—Ç, $",
            "üí∞"
        )
        st.plotly_chart(fig_import, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ –¥–æ–ª–∏ –Ω–µ–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
        fig_unfriendly = create_trend_chart(
            st.session_state.trends['years'],
            [r['share_unfriendly']*100 for r in st.session_state.records],
            "–î–æ–ª—è –Ω–µ–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω, %",
            "üö´"
        )
        st.plotly_chart(fig_unfriendly, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ –¥–æ–ª–∏ –ö–∏—Ç–∞—è
        fig_china = create_trend_chart(
            st.session_state.trends['years'],
            [r['share_china']*100 for r in st.session_state.records],
            "–î–æ–ª—è –ö–∏—Ç–∞—è, %",
            "üá®üá≥"
        )
        st.plotly_chart(fig_china, use_container_width=True)

# –§—É—Ç–µ—Ä
st.divider()
col1, col2, col3 = st.columns([1, 2, 1])
with col2:
    st.markdown("üìä **–ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–∞ –†–§** | –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Streamlit")
    st.caption("–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã UN Comtrade API")
